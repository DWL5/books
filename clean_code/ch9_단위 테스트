### TDD 법칙 세 가지
- 첫째 법칙 : 실패하는 단위 테스트를 작성할 때 까지 실제 코드를 작성하지 않는다.
- 둘째 법칙 : 컴파일은 실패하지 않으면서 실행이 실패하는 정보도로만 단위테스트를 작성한다.
- 셋째 법칙 : 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.

### 깨끗한 테스트 코드 유지하기
- 테스트 코드는 실제 코드 못지 않게 중요하다.
- 실제 코드 못지 않게 깨끗하게 짜야한다.

### 테스트는 유연성, 유지보수성, 재사용성을 제공한다.
- 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트다.
  - 테스트가 있다면 변경이 쉬워지기 때문이다.
- 테스트 케이스가 없다면 모든 변경이 잠정적인 버그다.

### 깨끗한 테스트 코드
- 깨끗한 테스트 코드를 만들려면 가독성이 중요하다.

### 테스트 당 assert 하나
- 테스트 당 한 개념만 테스트하라

### F.I.R.S.T
- Fast : 테스트는 빨라야한다. 테스트가 느리면 자주 돌릴 엄두를 못 낸다.
- Independent : 각 테스트는 서로 의존하면 안 된다. 한 테스트가 다음 테스트가 실행될 환경을 준비해서는 안 된다.
- Repeatable : 테스는 어떤 환경에서도 반복 가능해야 한다.
- Self-Validating : 테스트는 성공 아니면 실패다.
- Timely : 테스트는 적시에 작성해야한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다. -> 실제 코드를 먼저 짠다면, 테스트가 불가능 하도록 실제 코드를 설계하지도 모른다.

### 결론
- 테스트 코드는 지속적으로 깨끗하게 관리하자.
표현력을 높이고 간결하게 정리하자

